import sys
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image as im
from scipy.ndimage import interpolation as inter
from multiprocessing import Pool
import glob
import ntpath
import os

# input_file = sys.argv[1]

path_input = 'data_sets/rotation/zrotowane/'
path_output = 'data_sets/prostowanie_histogramy/'

extenstions = ['jpg', 'png']

def find_score(arr, angle):
    data = inter.rotate(arr, angle, reshape=False, order=0)
    hist = np.sum(data, axis=1)
    score = np.sum((hist[1:] - hist[:-1]) ** 2)
    return hist, score

def process_image(img_name):
    # nazwa pliku bez rozszerzenia
    img_name_no_ext = os.path.splitext(img_name)[0]
    
    # otwieranie przez openCV
    img = im.open(path_input + img_name)
    
    # convert to binary
    wd, ht = img.size
    pix = np.array(img.convert('1').getdata(), np.uint8)
    bin_img = 1 - (pix.reshape((ht, wd)) / 255.0)

    delta = 1
    limit = 20
    angles = np.arange(-limit, limit+delta, delta)
    scores = []

    for angle in angles:
        bin_img_resized = cv.resize(bin_img, (200, 500))
        hist, score = find_score(bin_img, angle)
        scores.append(score)

    best_score = max(scores)
    best_angle = angles[scores.index(best_score)]
    print('Best angle for {}: {}'.format(img_name, best_angle))

    # correct skew
    data = inter.rotate(bin_img, best_angle, reshape=False, order=0)
    img = im.fromarray((255 * data).astype("uint8")).convert("RGB")

    # Save the processed image
    img.save(path_output + 'proste_' + img_name)

if __name__ == "__main__":
    # lista plikow w katalogu o zadanych rozszerzeniach
    images = []
    for e in extenstions:
        images.extend(glob.glob(path_input + '*.' + e, recursive=False))

    # wyciagniecie samych nazw plikow bez sciezki
    images = list(map(ntpath.basename, images))

    # Number of processes to use for multiprocessing
    num_processes = 4  # You can adjust this as needed

    with Pool(num_processes) as pool:
        pool.map(process_image, images)
